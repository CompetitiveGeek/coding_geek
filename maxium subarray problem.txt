#include<iostream>
using namespace std;
void BruteForce(int arr[],int n){
    int max=0;
    for(int i=0;i<n;i++){
        for(int j=i;j<n;j++){
            int sum=0;
            for(int k=i;k<=j;k++){
                sum=sum+arr[k];
            }
            if(sum>max){
                max=sum;
            }
        }
    }
    cout<<"maxium sub array sum using brute force"<<max<<endl;
return;
}
void OptimizedMethod(int arr[],int n){
    int sum[n];
    sum[0]=arr[0];
    int max=0;
    for(int i=1;i<n;i++){
        sum[i]=sum[i-1]+arr[i];
        if(sum[i]>max)
            max=sum[i];
        
    }
    for(int i=1;i<n;i++){
        for(int j=i;j<n;j++){
            int sum1=0;
            sum1=sum[j]-sum[i-1];
            if(sum1>max)
            max=sum1;
        }
    }
    cout<<"OptimizedMethod"<<max<<endl;
}
 void kadane(int arr[],int n){
    int CurrSum[n];
    CurrSum[0]=arr[0];
    int max=0;
    for(int i=1;i<n;i++){
        CurrSum[i]=CurrSum[i-1]+arr[i];
        if(CurrSum[i]<0)
            CurrSum[i]=0;
        
        if(CurrSum[i]>max)
            max=CurrSum[i];
        
    }
    cout<<"kadane's algo"<<max<<endl;
}
int main() {
    int arr[]={1,2,3,4};
    int size=sizeof(arr)/sizeof(arr[0]);
    // Brute force approach creating all subarray and seeing maximum sub array sum(O(N^3))
    BruteForce(arr,size);
    //using (N^2) method
    OptimizedMethod(arr,size);
    // kadane's algo
    kadane(arr,size);

	return 0;
}